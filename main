// SPH.cpp : 定义控制台应用程序的入口点。
//

#include <stdafx.h>
#include <iostream>
#include <vector>
#include <stdlib.h>
#include <cmath>

using namespace std;

const double h = 0.05;
const double m = 0.05;
const int Nx = 200; //横向网格个数
const int Ny = 200; //纵向网格个数
const int N0 = 20; //每个网格单元内的粒子数
const int N = N0 * Nx * Ny; //总粒子数
const double Width = 2.0 * h * (Nx + 1);
const double Height = 2.0 * h * (Ny + 1);
const double pi = 3.141592653589793238462643; //圆周率

struct particle { //粒子结构
    double x, y, vx, vy, v, ax, ay, pressure, density;
};

double W(double rx, double ry = 0) //样条核函数
{
    double W;
    double s = sqrt(rx * rx + ry * ry) / h;
    if (s > 2.0)
        W = 0.0;
    else if (W > 1.0)
        W = 0.25 * (2.0 - s) * (2.0 - s) * (2.0 - s);
    else
        W = -0.75 * s * s * (2.0 - s);
    return W * 10.0 / (7.0 * pi * h * h);
}

double intergrate(double (*f)(double), double start, double end, double acc = 1E-6) //通用定积分函数
{
    double mid = start + (end - start) * rand() / (RAND_MAX + 1.0), mid1 = start + (mid - start) * rand() / (RAND_MAX + 1.0), mid2 = mid + (end - mid) * rand() / (RAND_MAX + 1.0);
    double &x0 = start, &x1 = mid1, &x2 = mid, &x3 = mid2, &x4 = end;
    double y0 = f(x0), y1 = f(x1), y2 = f(x2), y3 = f(x3), y4 = f(x4);
    double I = (x4 - x0) * ((x2 - x4) * (2.0 * x0 - 3.0 * x2 + x4) * y0 + (x4 - x0) * (x4 - x0) * y2 + (x2 - x0) * (x0 - 3.0 * x2 + 2.0 * x4) * y4) / (6.0 * (x2 - x0) * (x4 - x2)); //做随机抛物线拟合
    double I1 = (x2 - x0) * ((x1 - x2) * (2.0 * x0 - 3.0 * x1 + x2) * y0 + (x2 - x0) * (x2 - x0) * y1 + (x1 - x0) * (x0 - 3.0 * x1 + 2.0 * x2) * y2) / (6.0 * (x1 - x0) * (x2 - x1)); //做左侧随机抛物线拟合
    double I2 = (x4 - x2) * ((x3 - x4) * (2.0 * x2 - 3.0 * x3 + x4) * y2 + (x4 - x2) * (x4 - x2) * y3 + (x3 - x2) * (x2 - 3.0 * x3 + 2.0 * x4) * y4) / (6.0 * (x3 - x2) * (x4 - x3)); //做右侧随机抛物线拟合
    if (abs(I - I1 - I2) <= acc)
        return I;
    else
        return intergrate(f, start, mid, acc / 2.0) + intergrate(f, mid, end, acc / 2.0);
}

/*

函数按这样写 边界处理以后再说
void func(vector<particle>* netin, vector<particle>* netout)
{
    for (int nx = 0; nx < Nx; nx++) {
        for (int ny = 0; ny < Ny; ny++) {
            for (int x = nx - 1; x <= nx + 1; x++) {
                for (int y = ny - 1; y <= ny + 1; y++) {



                }
            }
        }
    }
}

这样调用
func(net, net_next);

*/

void initiate(vector<particle> netf[]) //初始化
{
    for (int k = 0; k < N0; k++) {
        for (int i = 0; i < Nx; i++) {
            for (int j = 0; j < Ny; j++)
                netf[i + j * Nx][k] = { (i + rand() / (RAND_MAX + 1.0)) * 2 * h, (j + rand() / (RAND_MAX + 1.0)) * 2.0 * h, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
        }
    }
}

int main()
{
    vector<particle> net1[N], net2[N];
    vector<particle> *net = net1, *net_next = net2;
    int which = 0;
    initiate(net1); //初始化

    if (which == 0)
        net = net2, net_next = net1;
    else
        net = net1, net_next = net2;
    which = 1 - which;

    return 0;
}
