// FluidsX.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include "iostream"
#include "vector"
#include "stdlib.h"

using namespace std;

const double h = 0.05;
const double m = 0.05;
const int Nx = 200; //横向网格个数
const int Ny = 200; //纵向网格个数
const int N = (Nx + 2)*(Ny + 2); //总网格个数
const int N0 = 20; //每个网格单元内初态的粒子数
const double Width = 2.0 * h * (Nx + 1);
const double Height = 2.0 * h * (Ny + 1);
const double Gamma = 0.1; //Gruneisen 系数
const double c0＝1510.0; //声速
const double s=1.92;
const double pi = 3.141592653589793238462643; //圆周率

class vec //矢量类
{
public:
	double x, y; //分量
	vec(double X, double Y) //构造函数
	{
		x = Y, y = Y;
	}

	vec(const vec &v) //拷贝构造函数
	{
		x = v.x, y = v.y;
	}

	double mold() //获取模
	{
		return sqrt(x*x + y*y);
	}

	vec operator +(const vec &v) //加法
	{
		return vec(x + v.x, y + v.y);
	}

	vec operator -(const vec &v) //减法
	{
		return vec(x - v.x, y - v.y);
	}

	vec operator *(double k) //数乘
	{
		return vec(k*x, k*y);
	}

	double operator *(const vec &v) //点乘
	{
		return x*v.x + y*v.y;
	}

	bool operator ==(const vec &v) //判断相等
	{
		return (x == v.x && y == v.y);
	}
};

vec operator *(double k, const vec &r) //数乘
{
	return vec(k*r.x, k*r.y);
}

struct particle //粒子结构
{
	vec r, v, a;
	double pressure, density;
};

double W(double rx, double ry = 0) //样条核函数
{
	double W;
	double s = sqrt(rx * rx + ry * ry) / h;
	if (s > 2.0)
		W = 0.0;
	else if (s > 1.0)
		W = 0.25 * (2.0 - s) * (2.0 - s) * (2.0 - s);
	else
		W = -0.75 * s * s * (2.0 - s);
	return W * 10.0 / (7.0 * pi * h * h);
}

double W(const vec &r) //样条核函数
{
	return W(r.x, r.y);
}

double W(const vec &r1, const vec &r2) //样条核函数
{
	return W(r2.x - r1.x, r2.y - r1.y);
}

vec GradW(double rx, double ry = 0) //样条核函数梯度
{
	double GradW;
	double s = sqrt(rx * rx + ry * ry) / h;
	if (s > 2.0)
		GradW = 0.0;
	else if (s > 1.0)
		GradW = -0.5 * (2.0 - s) * (2.0 - s);
	else
		GradW = -0.75 * s*(4.0 - 3.0*s);
	return (GradW * 10.0*s / (7.0 * pi * h * h*h*h))*vec(rx, ry);
}

vec GradW(const vec &r) //样条核函数梯度
{
	return GradW(r.x, r.y);
}

vec GradW1(const vec &r1, const vec &r2) //样条核函数梯度
{
	return GradW(r1.x - r2.x, r1.y - r2.y);
}

vec GradW2(const vec &r1, const vec &r2) //样条核函数梯度
{
	return GradW(r2.x - r1.x, r2.y - r1.y);
}

double integrate(double(*f)(double), double start, double end, double acc = 1E-6) //通用定积分函数
{
	double mid = (start + end) / 2, inth = end - start, fs = f(start), fe = f(end), fm = f(mid);
	double I = inth * (fs + 4 * fm + fe) / 6;
	double I1 = inth * (fs + 4 * f((start + mid) / 2) + fm) / 12;
	double I2 = inth * (fm + 4 * f((mid + end) / 2) + fe) / 12;
	if (abs(I - I1 - I2) <= acc)
		return I1 + I2;
	else
		return integrate(f, start, mid, acc / 2) + integrate(f, mid, end, acc / 2);
}

double integrate2D(double(*f)(double, double), double xstart, double xend, double ystart, double yend, double acc = 1E-6, char integral = 'a') //通用矩形区域二重积分函数
{
	double halfacc = acc / 2;
	switch (integral) {
	case 'x': {
		if (ystart == yend) {
			double xmid = (xstart + xend) / 2, xinth = xend - xstart, fxs = f(xstart, ystart), fxe = f(xend, ystart), fxm = f(xmid, ystart);
			double Ix = xinth * (fxs + 4 * fxm + fxe) / 6;
			double Ix1 = xinth * (fxs + 4 * f((xstart + xmid) / 2, ystart) + fxm) / 12;
			double Ix2 = xinth * (fxm + 4 * f((xmid + xend) / 2, ystart) + fxe) / 12;
			if (abs(Ix - Ix1 - Ix2) <= acc)
				return Ix1 + Ix2;
			else
				return integrate2D(f, xstart, xmid, ystart, ystart, halfacc, 'x') + integrate2D(f, xmid, xend, ystart, ystart, halfacc, 'x');
		}
	} break;
	case 'y': {
		if (xstart == xend) {
			double ymid = (ystart + yend) / 2, yinth = yend - ystart, fys = f(xstart, ystart), fye = f(xstart, yend), fym = f(xstart, ymid);
			double Iy = yinth * (fys + 4 * fym + fye) / 6;
			double Iy1 = yinth * (fys + 4 * f(xstart, (ystart + ymid) / 2) + fym) / 12;
			double Iy2 = yinth * (fym + 4 * f(xstart, (ymid + yend) / 2) + fye) / 12;
			if (abs(Iy - Iy1 - Iy2) <= acc)
				return Iy1 + Iy2;
			else
				return integrate2D(f, xstart, xstart, ystart, ymid, halfacc, 'y') + integrate2D(f, xstart, xstart, ymid, yend, halfacc, 'y');
		}
	} break;
	default: {
		if (xstart == xend || ystart == yend)
			return 0.0;
		double xmid = (xstart + xend) / 2, xinth = xend - xstart;
		double Ixs = integrate2D(f, xstart, xstart, ystart, yend, halfacc, 'y');
		double Ixe = integrate2D(f, xend, xend, ystart, yend, halfacc, 'y');
		double Ixm = integrate2D(f, xmid, xmid, ystart, yend, halfacc, 'y');
		double I = xinth * (Ixs + 4 * Ixm + Ixe) / 6;
		double I1 = xinth * (Ixs + 4 * integrate2D(f, (xstart + xmid) / 2, (xstart + xmid) / 2, ystart, yend, halfacc, 'y') + Ixm) / 12;
		double I2 = xinth * (Ixm + 4 * integrate2D(f, (xmid + xend) / 2, (xmid + xend) / 2, ystart, yend, halfacc, 'y') + Ixe) / 12;
		if (abs(I - I1 - I2) <= acc)
			return I1 + I2;
		else
			return integrate2D(f, xstart, xmid, ystart, yend, halfacc) + integrate2D(f, xmid, xend, ystart, yend, halfacc);

	} break;
	}
	return 0.0;
}

/*

函数按这样写
void density(vector<particle>* netin, vector<particle>* netout)
{
	for (int nx = 1; nx <= Nx; nx++)
	{
		for (int ny = 1; ny <= Ny; ny++)
		{
			for (int i = 0, double density = 0; i < netin[nx + ny*Nx].size; i++)
			{
				for (int x = nx - 1; x <= nx + 1; x++)
				{
					for (int y = ny - 1; y <= ny + 1; y++)
					{
						for (int j = 0; j < netin[x + y*Nx].size; j++)
						{



						}
					}
				}
			}
		}
	}
}

这样调用
func(net, net_next);

*/

void density(vector<particle>* netin, vector<particle>* netout) //密度函数
{
	for (int nx = 1; nx <= Nx; nx++)
	{
		for (int ny = 1; ny <= Ny; ny++)
		{
			for (int i = 0, double density = 0; i < netin[nx + ny*Nx].size; i++)
			{
				for (int x = nx - 1; x <= nx + 1; x++)
				{
					for (int y = ny - 1; y <= ny + 1; y++)
					{
						for (int j = 0; j < netin[x + y*Nx].size; j++)
							density += W(netin[x + y*Nx][j].r - netin[nx + ny*Nx][i].r);
					}
				}
				netout[nx + ny*Nx][i].density = m*density;
			}
		}
	}
}

double pressure(double u, double V) //压强函数
{
	double P_H = c0*c0*(1.0 / m - V) / ((1.0 / m - s / m + s*V) * (1.0 / m - s / m + s*V));
	double u_H = 0.5*P_H*(1.0 / m - V);
	return P_H + Gamma*m*(u - u_H);
}

void PZLZ(vector<particle> netf[]) //初始化
{
	for (int k = 0; k < N0; k++) {
		for (int i = 0; i < Nx; i++) {
			for (int j = 0; j < Ny; j++)
				netf[i + j * Nx][k] = { vec(i + rand() / (RAND_MAX + 1.0) * 2 * h, (j + rand() / (RAND_MAX + 1.0)) * 2.0 * h), vec(0.0, 0.0), vec(0.0, 0.0), 0.0, 0.0 };
		}
	}
}

int main()
{
	vector<particle> net1[N], net2[N];
	vector<particle> *net = net1, *net_next = net2;
	int which = 0;
	PZLZ(net1); //初始化

	if (which == 0)
		net = net2, net_next = net1;
	else
		net = net1, net_next = net2;
	which = 1 - which;
	return 0;
}
